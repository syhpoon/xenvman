// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// internal-tpl/discovery.tpl.data/domains.json
// internal-tpl/discovery.tpl.js
package env

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTplDiscoveryTplDataDomainsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\x31\x0a\x42\x31\x10\x05\x7b\x4f\xf1\x08\xbf\xfc\xe4\x00\x01\x0b\xb1\xd1\xce\x2b\x04\xb3\x4a\x20\x6e\x20\x49\x21\x2c\xef\xee\x62\x0c\xd8\x0e\x33\x63\x07\x00\x66\x68\x51\x9f\x82\x2d\xa7\xf7\x8e\xed\x5e\x75\x20\x1c\xe1\x4f\xa5\x9c\xab\x8e\x98\x55\x5a\x07\xb9\xe4\xfc\x98\x26\xb9\x9b\x89\xa6\x1f\x07\x9c\xd9\x4c\xfd\xa5\xf6\xa1\xf1\x25\xa4\x77\xe1\x8f\xaf\x37\xd2\xad\x85\x68\xfa\xfe\xf8\x09\x00\x00\xff\xff\xbc\x68\x8f\x02\x80\x00\x00\x00")

func internalTplDiscoveryTplDataDomainsJsonBytes() ([]byte, error) {
	return bindataRead(
		_internalTplDiscoveryTplDataDomainsJson,
		"internal-tpl/discovery.tpl.data/domains.json",
	)
}

func internalTplDiscoveryTplDataDomainsJson() (*asset, error) {
	bytes, err := internalTplDiscoveryTplDataDomainsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal-tpl/discovery.tpl.data/domains.json", size: 128, mode: os.FileMode(420), modTime: time.Unix(1545629188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTplDiscoveryTplJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x5f\x6b\x9c\x40\x10\x7f\xf7\x53\x0c\x03\x21\x2b\x9c\x7a\x6d\x29\x04\x83\x0f\x21\x49\x21\xd0\x86\x10\x1f\x4b\x1f\xb6\xee\x5c\xb4\xd5\x5d\xd9\x19\xaf\x17\xc4\xef\x5e\xd6\x9e\x77\x97\xa3\xa5\xfa\xe4\xec\xcc\xef\xcf\xfc\xdc\x2c\x83\x92\xfc\xb6\xa9\x08\x4c\xc3\x95\xdb\x92\x7f\x05\xa1\xae\x6f\xb5\x50\x94\x65\x51\x96\xc1\x93\xf6\xba\x23\x21\xcf\x79\xf8\xf4\x54\x0d\x9e\x9d\x87\x3c\x07\x16\xdf\xd8\x17\x18\xf1\x5d\x3a\xbf\x38\x41\x02\xf7\x3b\x21\x6f\x75\x0b\x77\x8f\x25\x30\xf9\x2d\x79\x10\x07\x03\x53\x14\x6d\x06\x5b\x49\xe3\x2c\xd0\x8e\xaa\x41\x48\x49\xdf\xae\xa0\x0f\x0c\x1c\xc3\x18\x01\xc8\x6b\x4f\xe9\xbd\xe5\xc1\x53\x39\xa3\x2b\x5c\x18\x71\xe9\x4c\x8d\xe5\xe7\x7d\x31\xbe\x8e\x22\x80\xad\xf6\xd0\x74\x2f\x50\x80\xf4\x6d\xfa\x89\xa4\xaa\x1f\x3a\xfd\x42\x0a\xf9\xb5\xee\x9d\xb3\xd9\x8e\xec\xb6\xd3\x36\x0f\xc6\x58\x30\xbe\xde\x4f\x55\xce\x0a\x14\x61\x38\x7d\xa4\x5f\xb7\xce\x8a\x6e\x2c\x79\x85\x87\x7d\xe0\x91\xe2\xe0\xbd\x80\x83\xe5\xf9\xb0\xd9\x80\x9a\x95\x3f\xf0\x1d\x6d\x1a\x4b\x46\xed\xa5\x2e\x23\xf1\x1f\x7b\x70\x8a\x71\xd6\x12\x24\x4d\x0b\x55\xef\x7c\xd0\x75\xb5\xbe\x5a\xcf\x0c\x41\x67\xfa\xc5\x0d\x56\xee\xb4\x68\x85\xc6\x75\xba\xb1\x9c\xfe\x60\x67\x71\x05\x98\x9d\x15\x46\x6c\xac\x90\xef\x5d\x30\x8c\x39\x88\x1f\x68\x9a\x5d\xcf\x48\x25\xc9\x93\xf3\xc2\x2a\xf0\xbc\x29\x7f\xd6\xdf\xa9\x55\x18\xf6\x95\x1c\x77\xb0\x02\x0c\x08\xf8\xff\xd6\x24\x20\xe2\x0a\x36\x9d\x28\xbc\x30\x21\xb4\x40\x11\x1f\x5d\x94\x24\xb7\x9d\x51\xb8\x64\x12\xc0\x4f\x98\xe6\x2d\x1d\x1f\x4c\x92\x4e\xf7\xc5\x99\xbf\xb3\xa6\x99\x2c\x49\x6a\x91\x3e\xd1\xc6\xf8\x22\x3f\x32\xff\x05\xd0\x58\xde\xb7\x7d\xfc\xf0\x2f\xac\x25\x15\x2e\x2e\x18\x57\x87\xd8\xe2\x08\xe0\xc4\xcb\x8d\x31\xcf\xa4\x4d\x63\x89\xf9\xb6\xa6\xea\xa7\xc2\x20\x22\x04\x30\xc3\xe2\xe0\x5b\xcc\x67\xcc\xcb\x70\x90\x67\xd9\x38\xa6\xcb\x15\xb9\x31\xc6\x13\xf3\x34\xe5\xe3\x98\x96\xd4\x6e\xd2\xfb\x5d\xef\x98\x4c\xc8\x06\x2e\xcc\x34\x65\x35\xe9\x56\xea\xcb\x37\x5e\xb0\x72\x86\x18\x73\xf8\xfa\x7e\xbd\xfe\x16\xfe\x9a\xf8\x3a\x9a\x7e\x07\x00\x00\xff\xff\xb0\xdb\x40\xc7\xcc\x03\x00\x00")

func internalTplDiscoveryTplJsBytes() ([]byte, error) {
	return bindataRead(
		_internalTplDiscoveryTplJs,
		"internal-tpl/discovery.tpl.js",
	)
}

func internalTplDiscoveryTplJs() (*asset, error) {
	bytes, err := internalTplDiscoveryTplJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal-tpl/discovery.tpl.js", size: 972, mode: os.FileMode(420), modTime: time.Unix(1546406514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal-tpl/discovery.tpl.data/domains.json": internalTplDiscoveryTplDataDomainsJson,
	"internal-tpl/discovery.tpl.js":                internalTplDiscoveryTplJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"internal-tpl": &bintree{nil, map[string]*bintree{
		"discovery.tpl.data": &bintree{nil, map[string]*bintree{
			"domains.json": &bintree{internalTplDiscoveryTplDataDomainsJson, map[string]*bintree{}},
		}},
		"discovery.tpl.js": &bintree{internalTplDiscoveryTplJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
