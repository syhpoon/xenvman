// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// internal-tpl/discovery.tpl.data/domains.json
// internal-tpl/discovery.tpl.js
package env

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTplDiscoveryTplDataDomainsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\x31\x0a\x42\x31\x10\x05\x7b\x4f\xf1\x08\xbf\xfc\xe4\x00\x01\x0b\xb1\xd1\xce\x2b\x04\xb3\x4a\x20\x6e\x20\x49\x21\x2c\xef\xee\x62\x0c\xd8\x0e\x33\x63\x07\x00\x66\x68\x51\x9f\x82\x2d\xa7\xf7\x8e\xed\x5e\x75\x20\x1c\xe1\x4f\xa5\x9c\xab\x8e\x98\x55\x5a\x07\xb9\xe4\xfc\x98\x26\xb9\x9b\x89\xa6\x1f\x07\x9c\xd9\x4c\xfd\xa5\xf6\xa1\xf1\x25\xa4\x77\xe1\x8f\xaf\x37\xd2\xad\x85\x68\xfa\xfe\xf8\x09\x00\x00\xff\xff\xbc\x68\x8f\x02\x80\x00\x00\x00")

func internalTplDiscoveryTplDataDomainsJsonBytes() ([]byte, error) {
	return bindataRead(
		_internalTplDiscoveryTplDataDomainsJson,
		"internal-tpl/discovery.tpl.data/domains.json",
	)
}

func internalTplDiscoveryTplDataDomainsJson() (*asset, error) {
	bytes, err := internalTplDiscoveryTplDataDomainsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal-tpl/discovery.tpl.data/domains.json", size: 128, mode: os.FileMode(420), modTime: time.Unix(1545547574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTplDiscoveryTplJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xd1\x6a\xdb\x4c\x10\x85\xef\xf5\x14\xc3\xc0\x0f\x2b\xb0\xa4\xfc\x94\x42\x90\xd1\x55\x9c\x42\xa0\x0d\xa1\x7e\x82\xad\x34\xb6\xb7\x48\xbb\x62\x66\xa4\xda\x18\xbf\x7b\x59\x55\xb2\x53\xa7\xf6\x95\x66\xcf\x9c\x39\xdf\x29\x0a\xd8\x12\x8f\xae\x26\x68\x9c\xd4\x61\x24\x3e\x81\x52\xd7\xb7\x56\x29\x29\x8a\xa4\x28\xe0\xcd\xb2\xed\x48\x89\xa5\x8c\x9f\x4c\xf5\xc0\x12\x18\xca\x12\x44\xd9\xf9\x3d\x9c\xf1\xff\x7c\xfa\xe3\x05\x32\x78\x3e\x2a\xb1\xb7\x2d\x6c\x5e\xb7\x20\xc4\x23\x31\x68\x80\x41\x28\x49\x76\x83\xaf\xd5\x05\x0f\x74\xa4\x7a\x50\x32\xda\xb7\x2b\xe8\xe3\x05\x49\xe1\x9c\x00\xe8\xa9\xa7\xfc\xd9\xcb\xc0\xb4\x9d\xdc\x0d\x2e\x17\x71\x51\xe6\x8d\x97\xef\xf3\x30\x5d\x27\x09\xc0\x68\x19\x5c\xb7\x87\x0a\xb4\x6f\xf3\x2f\xa4\xf5\xe1\xa5\xb3\x7b\x32\x28\xa7\x43\x1f\x82\x2f\x8e\xe4\xc7\xce\xfa\x32\x82\x89\x62\xba\x9e\xb7\xea\xe0\x15\xaa\xb8\x9c\xbf\xd2\xaf\xa7\xe0\xd5\x3a\x4f\x6c\xf0\xda\x07\xde\x4e\x5c\xd9\x2b\xb8\x22\x4f\x8f\x6e\x07\x66\x4a\xfe\x22\x1b\xda\x39\x4f\x8d\x99\xa3\x2e\x2b\xe9\x1f\x3c\x78\xef\x71\x27\x89\x91\x2e\xd1\x2d\x66\xca\xbf\x85\xc1\xeb\xc6\xaa\x35\xd8\x84\xce\x3a\x2f\xf9\x4f\x09\x1e\x57\x80\xc5\xdd\xe0\x8c\xce\x2b\x71\x1f\x22\x1c\x96\xa0\x3c\xd0\x65\x22\x9c\x9c\xb6\xa4\x6f\x81\x55\xcc\xe3\xc3\xe3\xc3\x5f\xe3\xaf\xf6\x07\xb5\x06\x63\x37\xd9\x8d\x77\x05\x18\x1d\x66\xee\x45\xfb\xd4\x35\x06\x97\x1a\xa3\xe6\xdd\xc2\x04\x76\xfb\x61\x96\x75\xb6\xaf\xee\x62\x7e\x14\x1d\x54\xfb\xcc\x36\x0d\x57\x65\x8c\xf6\x2f\x49\xe3\x65\x56\x7c\xfe\xf4\xe1\x7d\xd7\xa9\xc1\x2c\x5b\xfa\x93\xea\x3f\xc1\xd5\xb5\xe0\x34\x01\x48\xd7\xc9\xe5\x77\x00\x00\x00\xff\xff\xcc\x0f\x1b\x24\xe4\x02\x00\x00")

func internalTplDiscoveryTplJsBytes() ([]byte, error) {
	return bindataRead(
		_internalTplDiscoveryTplJs,
		"internal-tpl/discovery.tpl.js",
	)
}

func internalTplDiscoveryTplJs() (*asset, error) {
	bytes, err := internalTplDiscoveryTplJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal-tpl/discovery.tpl.js", size: 740, mode: os.FileMode(420), modTime: time.Unix(1545627037, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal-tpl/discovery.tpl.data/domains.json": internalTplDiscoveryTplDataDomainsJson,
	"internal-tpl/discovery.tpl.js":                internalTplDiscoveryTplJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"internal-tpl": &bintree{nil, map[string]*bintree{
		"discovery.tpl.data": &bintree{nil, map[string]*bintree{
			"domains.json": &bintree{internalTplDiscoveryTplDataDomainsJson, map[string]*bintree{}},
		}},
		"discovery.tpl.js": &bintree{internalTplDiscoveryTplJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
